"""
Convert list and sets of boolean categorical data into one-hot format and back again.

Functions:

	categories_to_onehot_encoders(list/set) -> dict,list
	set_to_onehot(list/set,dict) -> list
	onehot_to_set(listquit,dict) -> set
"""




def categories_to_onehot_encoders(categories_data):
	"""
inputs
	categories_data: a list or set of all the possible boolearn categories to be used
outputs
	onehot_encoder: a dict that maps categories to their indicies in the one-hot array
	onehot_decoder: a list that maps the indicies in the one-hot array to their category
	"""
	onehot_decoder = list(set(categories_data))
	onehot_encoder = {}
	for index, category in enumerate(onehot_decoder):
		onehot_encoder[category] = index
	return onehot_encoder, onehot_decoder




def set_to_onehot(set_data,onehot_encoder):
	"""
inputs
	set_data: a list or set of all the categories whose values are true
	onehot_encoder: a dict (generated by categories_to_onehot_encoders) that maps categories to their indicies in the one-hot array
outputs
	onehot_data: a list representing the one-hot encoding of the set_data of categories
	"""
	onehot_data = [0]*len(onehot_encoder.keys())
	for category in set_data:
		onehot_data[onehot_encoder[category]] = 1
	return onehot_data




def onehot_to_set(onehot_data,onehot_decoder):
	"""
inputs
	onehot_data: a list representing the one-hot encoding of the set_data of categories
	onehot_decoder: a list (generated by categories_to_onehot_encoders) that maps the indicies in the one-hot array to their category
outputs
	set_data: a list or set of all the categories whose values are true
	"""
	set_data = set()
	for index,val in enumerate(onehot_data):
		if int(val) == 1:
			set_data.update(set([onehot_decoder[index]]))
	return set_data




if __name__=="__main__":
	#The main is use to give an exmaple
	
	all_categories = ["apple","banana","orange","apple"]
	print "The categories are: "+str(set(all_categories))+"\n"
	
	onehot_encoder, onehot_decoder = categories_to_onehot_encoders(all_categories)
	print "The encoding is"
	for index, fruit in enumerate(onehot_decoder):
		print "\t"+str(index)+" maps to "+str(fruit)
	print ""
	
	set_data = ["apple","orange"]
	print "The set "+str(set_data)+" is encoded as"
	onehot_data = set_to_onehot(set_data,onehot_encoder)
	print onehot_data
	print "From which the original can be recovered by decoding"
	print onehot_to_set(onehot_data,onehot_decoder)
